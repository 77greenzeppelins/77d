/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
'use client';
import * as THREE from 'three';
import React from 'react';
import { useGLTF, useMatcapTexture } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import FrameMatcapTexture from '../../_Drei/textures/frameMatcapTextures/FrameMatcapTexture';

/**TS**/
type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    Plane001: THREE.Mesh;
  };
  materials: {
    ['default']: THREE.MeshStandardMaterial;
    ['default']: THREE.MeshStandardMaterial;
  };
};

interface Props {
  groupProps: JSX.IntrinsicElements['group'];
  variantsSwitcher: number;
}

/**------------------------------------------------------------**/
const BasicFrame = ({ groupProps, variantsSwitcher }: Props) => {
  /**GLTFLoader Section**/
  const { nodes, materials } = useGLTF(
    '/assets/3D/glb/frame_4_draco.glb'
  ) as GLTFResult;

  /**JSX**/
  return (
    <group
      {...groupProps}
      // dispose={null}
      onPointerOver={e => (
        e.stopPropagation(), console.log('e.object.name', e.object.name)
      )}
      onPointerOut={e => (e.stopPropagation(), console.log('...onPointerOut'))}
    >
      {variantsSwitcher ? (
        <mesh
          name="PlaneSlim"
          castShadow
          receiveShadow
          geometry={nodes.Plane001.geometry}
          rotation={[Math.PI / 2, 0, 0]}
        >
          <FrameMatcapTexture textureIndex={'1'} />
        </mesh>
      ) : (
        <mesh
          name="PlaneStandard"
          castShadow
          receiveShadow
          geometry={nodes.Plane.geometry}
          //   material={materials['default']}
          rotation={[Math.PI / 2, 0, 0]}
        >
          <FrameMatcapTexture textureIndex={'1'} />
        </mesh>
      )}
    </group>
  );
};

useGLTF.preload('/frame_4_draco.glb');

export default BasicFrame;
